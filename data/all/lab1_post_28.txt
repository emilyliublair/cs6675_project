Question: 
    Expected Output Tests 4-7I found a Wikipedia article detailing a "typical" outputÂ  of records from an E820 call. The struct I'm iterating over is nearly identical, except for one of the records entries. Is this an issue with my do_e820 call, or is it expected to have some difference(s)? Should this be the standard we strive for when debugging in gdb? Can this difference lead to "incorrect output" and "timeout" errors in the autograder?lab1

    Student Answer: 
    

    Instructor Answer: 
    What edge cases have you checked for? Knowing that you are dealing with 32-bit addresses (how much memory is addressable, keeping in mind you only have half the address space to work with?), and knowing the memory map xv6 uses (see Figure 2-2 of the xv6 book, page 31), could there be any potential problems depending on the amount of memory that is present in the system?

    Followup Discussions:
    @104_f1Syed Hamza Qadri3 months agoThat's a good point. When I run my code locally I find (by looping over the array as well as inspecting memory in gdb) that there are two type 1 regions, but only one of them is in extended memory - the other starts at address 0 and has a length of 0x9fc00 so as far as I understand it lies entirely outside extended memory, and the lab instructions mention that we only need to change how the kernel handles extended memory. Based on this I assumed that there is only ever one type 1 region in extended memory, but I now realize that that assumption might be wrong for some test cases. Thanks for the answer, will look into this3Nathan Prashant Duggal3 months agoOhh I wasn't thinking about extended memory, do you just say extended memory is anything with start addr >= 0x00100000?0Syed Hamza Qadri3 months agoAs far as I understand yeah. When running locally there seems to be one type 1 region that starts exactly at 0x00100000 and then ends much later. That might vary in the autograder cases though0Rohan Natansh Bafna3 months agoFor this lab, the autograder runs xv6 similarly to how you would run it when testing; using the xv6-qemu script and varying the amount of memory with the -m flag. In real life, you'd have to worry about e820 reporting more complicated layouts, but for this lab you just have to get the kernel to work with the memory layouts that qemu provides.good comment1Nathan Prashant Duggal3 months agoCan you give an example of using the xv6-qemu script with the -m flag? I can't seem to get it to work.0Rohan Natansh Bafna3 months ago./xv6-qemu -m 768MOf course, change the amount of memory afterwards to whatever you want. M means megabytes, G is gigabytes, etc.good comment0Nathan Prashant Duggal3 months agoCool that works thanks, got any suggestions for this?0Rohan Natansh Bafna3 months agoAh yeah, that's a bug, guess whoever wrote this didn't realize print wasn't a command in bash and nobody bothered to fix it lol.Just runsed -i 's/print /echo /' ./xv6-qemuto fix it.good comment2@104_f2Anonymous Comp3 months agoI was also failing the last test case and I played around with the memory size with the -m flag. I think test case 7 is testing if we are checking if we have too much physical memory (i.e the e820 record will give us more memory and will exceed our upper bound).0Joshua Patrick Forden3 months agoI also was playing around with the -m flag, and my kernel would be unable to boot if I allocated near and above 2 MB, which makes sense given that the max possible address of extended memory is 0xFE000000 (Figure 2-2).I still have this edge case issue after checking if the new max address from the e820 is > 0xFE000000 and setting it to 0xFE000000 if so.Any ideas how to deal with this edge case?3Nathan Prashant Duggal3 months ago0xFE000000 is the maxphysical address. All virtual addresses past the kernel are bumped up by 0x80000000 when translated to physical. Make sure to account for that when setting your upper limit.11Anonymous Comp3 months ago^^^1@104_f3Anonymous Atom3 months agoWhen I do ./xv6-qemu -m 2M my kernel is crashing but when I do ./xv6-qemu -m 786M it does work. Does a smaller memory address mean that I need to handle something differently? My max address starts at 0 in case e280 has no addresses greater than PHYSTOP.0Nathan Prashant Duggal3 months agoI think we talked about this in class yesterday - the first page allocated by xv6 is a big page of 4M. That makes me think that giving xv6 2M is too little.3
    