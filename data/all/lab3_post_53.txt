Question: 
    In what part of Lab3 are data-races a problem?The lab3 description states "any OS code should be free of memory leaks anddata-races". I'm wondering as to what exactly the scope of this statement is, specifically in the context of data-races.One problem I could see is argint() behaving in a racy way in the context of sbrks in the same thread group. But does this mean that ineverysyscall that uses an argument we have to atomize accesses to the sz shared resource? I feel like most racy interactions between argint() and sbrk come down to poor userspace programming.This remains true for most other racy interactions I can think of that don't cause some other explicit problem, like a memory leak. So I suppose my question is should we be looking to prevent data races only in the instances where they cause other problems, or is the hand grading going to check that we prevent data races just for the sake of preventing data races?lab3

    Student Answer: 
    

    Instructor Answer: 
    Have you tried testing in a user space program to check the return value of both the child and the parent? Also make sure you set the eax to 0 after you copy the parents trap frame to the new cloned thread

    Followup Discussions:
    @516_f1Anonymous Poet3 weeks agoHi, I’ve ran a few user space tests where I set up a clone and then have an if statement for return value 0, but the if statement never seems to execute.Do I need to change the context of the new process at all, right now it still goes to forkret0Anonymous Atom3 weeks agoDid you end up fixing this? I also pass all of clone except case 12 and my clone doesn't return 0 in the child for some reason. I clear eax after copying the trap frame0Anonymous Poet3 weeks agoNope, I’m still struggling with this, going tot rt to go to office hours either today or tomorrow but have a pretty packed schedule.0Anonymous Poet3 weeks agoHey I think I figured it out, check your syscall.c file for any places where you might be using bad/0 values if you recently cloned something.0
    