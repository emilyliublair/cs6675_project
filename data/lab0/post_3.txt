Question: 
    VSCode xv6 Development and Debugging SetupI’ve developed a VSCode development environment config that I believe will provide a lot of value to people working on the labs. It makes xv6 easier to develop with compared to the previous process of manually building the project, launching the Docker container, using gdb to debug from the command line, running submission script, etc. I provide some launch and task scripts to automatically launch a VSCode server from within the docker container automatically as well as enable easy building of the project and launching of a debugging environment which seamlessly integrates with VSCode’s GUI debugger. This allows one to do cool things like:Step through the code and set breakpoints from within VSCode GUIEasily inspect the call stack, local variables, memory, CPU state, disassembler output, etc.Have easy debugger controls, like step-into, step-out-of, continue, pause, etc.and much more!Config Setup:Downloadconfig.zipand extract its contents into the top level directory of your repo. This will put the custom.devcontainerand.vscodefolders there.Install theDev ContainersVSCode extension.Open the xv6 project in VSCode if you have not done so yet. Press Shift+Ctrl+P (Windows/Linux) or Shift+Cmd+P (MacOS) to open the command palette and type “Dev Containers: Reopen in Container” and press enter to make sure that the project opens in the Docker container.If you see a dialogue upon entering the project that says something about picking build tools, just select the GCC option (should be the last option in the list).Config Usage:Debugging: To debug the project, you just press F5 (fn+F5 if on MacOS) which builds and starts an interactive debugging session. You’ll be able to interact with the running xv6 in the terminal tab at the bottom of the screen. Additionally, a small debugging panel will appear that has several important debugging controls on it (experiment with them or hover over them to see their purpose). If you want to set a breakpoint first before debugging (you can set them while debugging too), just use your mouse to create a breakpoint by clicking on the area to the left of the line numbers in a file in VSCode (you should see a small red circle there as a breakpoint). The breakpoint can be toggled by pressing it again.Building and Running Only: If you just want to build and run the project, you can open the command palette, type “Tasks: Run Task”, select this and then select the “start-xv6” task.Submission: To quickly build and run the submission script, you can select the “submit” task which will build the project and create the submission.zip file.Notes:When you launch VSCode again and if the project was the last worked-on project, VSCode will automatically open it in the Docker container. If it wasn’t the last project, you can easily reopen it by going into File > Open Recent and selecting the option with “/xv6 [Dev Container]” in it.For those that want to edit which module is being debugged (kernel is the default), you can do this by editing the.vscode/launch.jsonconfig:{"configurations": [
        {"name":"(gdb) Attach","type":"cppdbg","request":"launch","program":"${workspaceFolder}/build/kernel/kernel",//change this to themoduletodebug,e.g. ${workspaceFolder}/build/user/_limits...run code snippetVisit Manage Class to disable runnable code snippets×I’ll be working on having a better method of setting the module dynamically in the future, which would be activated when pressing the Debug button in the top right of the editor window while viewing an arbitrary file in the project.Caveats:I’ve only tested my scripts on MacOS, so your mileage may vary on Windows or Linux. Let me or others know if modifications are required for the config to work on Windows or Linux.It seems like Dev Containers and WSL has some incomptability, as referenced by these Github issues:#9357,#10338,#9296, and#9064. A potential temporary fix may be to downgrade the Dev Containers version to v0.309.0 (reference).lab0lab1lab2lab3lab4

    Student Answer: 
    

    Instructor Answer: 
    This is great! We should definitely add this to the course wiki come the end of the semester.

    Followup Discussions:
    
    