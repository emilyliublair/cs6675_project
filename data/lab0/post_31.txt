Question: 
    "zombie!" on forkexecI am getting "zombie!" printed in terminal when testing forkexec.c. Is this because my parent process is not waiting for the child to finish? Is it expected that the parent always waits?lab0

    Student Answer: 
    

    Instructor Answer: 
    Yes, you are right, and it is expected that the parent waits ... kind of. The reason that parents normally wait for their children is that when a process dies, the kernel context associated with that process needs to be cleaned up, but a kernel context can't clean up itself. So, the process is left in memory as a "zombie" process, and is only fully removed when its parent waits on the child, since then the kernel is in another process's context and can safely clean up the dead child process (how morbid!)If a parent dies before its children do, then the children are adopted by init,which is what prints the zombie! linein xv6. Normally in Unix systems, this is actually done quite regularly, to create daemons (long running system services); fork, the parent dies, and the child becomes a direct child of init. (Actually, this is normally done twice due to how processes interact with terminals, google "double forking" if you're interested.) There's nothing explicitlywrongwith a parent dying before its children, but if you're not creating a daemon process it's better to let the parent clean up the child itself.

    Followup Discussions:
    @26_f1Joshua Patrick Forden3 months agoHere's a good Stack Overflow post about forking twice:https://stackoverflow.com/questions/10932592/why-fork-twice0@26_f2Killian Patrick Vetter3 months agoIs having the "zombie!" print ok or do we need to ensure that it won't print for full credit?0Varun Mehrotra3 months agoI would suggest making sure “zombie” does not print. While echo could execute successfully, figuring out how to write the program s.t. “zombie” does not print will help you better understand the fork-exec design pattern and how the syscalls available to the parent to clean up the child process before it dies.good comment1
    