Question: 
    thread_create()1. Should a thread's stack be of the same size as the default stack size of a process?2. On success, doesthread_create()return the pid of the created thread only after the thread finishes running?lab3

    Student Answer: 
    Not 100% sure but I used the default stack size and I’m passing all the relevant tests except 31 (which, according to another post, tests for locking of shared resources, so I assume using the default is fine)thread_create()should return immediately once the thread is created. You should then be able to usethread_wait()to wait on the pid returned bythread_create().~ An instructor (Rohan Natansh Bafna) endorsed this answer ~

    Instructor Answer: 
    

    Followup Discussions:
    @470_f1Anonymous Calc4 weeks agoIf a thread callsthread_wait()to wait on itself (thread 3 callsthread_wait(3)), how can we return the pid on success? The provided method frees the user stack and exits without returning.Also, are we supposed to save the user stack so that we can free it inthread_wait()?0Anonymous Poet4 weeks agoYou don’t need to free the stack inthread_wait(), you can do it inthread_create()because that doesn’t need to return in the newly created thread.I’m fairly certain a thread callingthread_wait()on itself is undefined behavior? Would appreciate if a TA could confirm though.0Anonymous Calc4 weeks agoWe would want the new thread to runstart_routineso we wouldn't want to exit the newly created thread though. I'm not sure what I'm missing but it seems that I can just usefree()instead offree_stack_and_exit()?Lab 8's slides also mentioned that:Calling fork or exec on a thread is undefinedSo does this mean we're not supposed to useexec()to runstart_routine?And from P3 Nit:Sincethread_waittakes in a pid, users can pass in the pid of the process itself (and not that of a thread created by it). This is fine.^I assumed this means that we should handle the case of a thread callingthread_wait() on itself.+1 It would be really helpful if any TA could clarify.0Anonymous Poet4 weeks agostart_routineis a function pointer… how were you planning to useexecto run it? You should just be callingstart_routineas a function with parameterarg. Afterstart_routinereturns, you can free the stack (all of this can happen inthread_create).~ An instructor (Rohan Natansh Bafna) thinks this is a good comment ~1Anonymous Calc4 weeks agoI’ve completely misunderstood how I should call start_routine. Thanks for catching that!0Rohan Natansh Bafna4 weeks agoRegarding callingthread_wait()on yourself, it’s best if you just return -1. I would avoid letting that be UB.good comment4Anonymous Poet4 weeks agoThat makes sense, I think if you’re usingwaitpidthis will be handled automatically anyway.~ An instructor (Rohan Natansh Bafna) thinks this is a good comment ~1Yirou Wang3 weeks agoIn the “Nits” section forthread_wait, it mentions thatSincethread_waittakes in a pid, users can pass in the pid of the process itself (and not that of a thread created by it). This is fine.Does this just mean we should return -1? Because it sounds like it’s allowing the pid of the process itself to execute without error.0@470_f2Anonymous Beaker3 weeks agoFor the default size would it just be KSTACKSIZE?0
    