Question: 
    Testing for login, testcase 27Test #27 is the only one I'm failing right now, and I really need some advice on how to test the login functionality. Here are some things I've tested:1. password not stored in plaintext2. password not able to be modified by non-root processes3. password not readable by non-root processes4. (root, admin) login automatically exists upon bootup5. created users persist upon reboot6. Password and username can handle up to MAX_INPUT_SIZESubquestion: Should we handle cases over the input max?7. Can log in again once account is created8. does_user_exist returns 0 when user has been created, -1 if not9. All UIDs of users are unique and monotonically incrementingSubquestion: What should we do when we have over 0xFFFF users?10. login_user fails upon user not existing or password mismatch11. The permissions of users is lowered to their uid before shell launch12. UID of root is 0Please help! :(lab4

    Student Answer: 
    

    Instructor Answer: 
    

    Followup Discussions:
    @611_f1Anonymous Mouse2 weeks agoDid you ever figure out the answers to questions 1-3?0Anonymous Atom2 weeks agoWe only need to check for file permissions when we are making changes to an inode (ie R/W). So for 1-3 consider what inode(s) we are changing, and what permission(s) is required.0Anonymous Mouse2 weeks agofor link/unlink, do we need to check if the inode itself is writeable? since for both link and unlink, we end up modifying the inode's reference bits.0Anonymous Atom2 weeks agoYou only need to check for file permissions if you are reading from or writing to what is stored inside an inode. Reference bits are not part of an inode’s content so no if that’s what you’re only modifying.undo helpful1
    