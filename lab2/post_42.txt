Question: 
    Virtual Memory IncreasingDuring bootup I see that for init the guard page is at x0000 - x1000 and then the stack is x1000 - x2000. For shell I see that the virtual address of the guard page is x1000 - x2000 and the stack is x2000 - x3000. Why is virtual memory increasing like this for different processes? The stack pointer for init is x3000 and x4000 for shell. I am not sure how the stack pointer gets increased like this before the processes have any chance to request memory my understanding was that in exec sz should be x1000 and then incremented to 3000 after two page allocations.Also it looks like we have extra page zeros not sure if we should have PGZERO 0x0, 0x1000, 0x3000 after the first time.lab2

    Student Answer: 
    

    Instructor Answer: 
    

    Followup Discussions:
    @262_f1Sukrit Kumar1 month agoIf possible, can you re-add the first screen shot ? It doesn't load up for some reasongood comment0Anonymous Scale1 month agoJust did, sorry for the inconvenience0Sukrit Kumar1 month agoFor some reason piazza is still glitching on my end, if possible can you reply with the image here ?good comment0Anonymous Scale1 month agoDoes this fix it?0Sukrit Kumar1 month agoYes it did, so from the looks of it output $1 printed above is the sz of the data+text of the init program that and $2 is the output value after the roundup happens hence 4096 (0x1000).The initial stack pointer location for a program will depend on the size of the program and hence the text+data segment.init layout:0x0000 - 0x1000: Program (text + data) (4096)0x1000 - 0x2000: Guard page (4096+PGSIZE)0x2000 - 0x3000: Stack (4096+PGSIZE, 4096+2*PGSIZE)sp points to 0x3000 after setupSo in the case of sh the layout will look like this:0x0000 - 0x2000: Program (text + data) (8192)0x2000 - 0x3000: Guard page (8192+PGSIZE)0x3000 - 0x4000: Stack (8192+PGSIZE, 8192+2*PGSIZE)sp points to 0x4000 for shThe sp basically represent the top of each process's virtual address space after all allocations and each process has it's own distinct virtual address layout hence the diff sp values. Hope this makes sense.Also the page zero's are expected for 0x0, 0x1000, and 0x3000 after the first timegood comment2
    